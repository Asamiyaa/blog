抽象归纳(现实事物的本质 - 传入?输出? - )
逻辑实现(method - if/else | for/递归 | - )

----------------------------------------------------
软件生命周期
   模拟天猫商城  http://how2j.cn/
      
      1.需求分析
            展示 --每个人看到的相同的 在前端页面上显示数据库中的数据，如首页，产品页，购物车，分类页面等等。
                   (首页 产品页 分类页 搜索结果页 购物车查看页 结算页 确认支付页 我的订单页 确认收货页 评价页 页头信息展示) 
            交互 -- 通过POST,GET等http协议，与服务端进行同步或者异步数据交互
                   (分类页排序 立即购买 加入购物车 调整订单项数量 删除订单项 生成订单 订单页功能 确认付款 确认收货 提交评价 登录 注册 退出 搜索)
            后台 -- 对支撑整站需要用到的数据，进行管理维护。CMS后台管理系统
                   (分类管理 属性管理 产品管理 产品图片管理  产品属性设置 用户管理 订单管理 后台需求列表 )
      2.表结构设计
            数据库
            表于表关系 -- 思维导图得到一对多...关系 图 -> 列表
            建表  -- 表结构设计(主外键[保持数据的一致] / 表字段 ) 
            表与页面 
            
      3.原型后台 -- 并不是所有的后端，都需要原型，特别是比较典型的CRUD维护管理页面，开发人员基于现存的模板做起来也是比较快的。本项目中有复杂逻辑
                     所以将需求-后台中内容原型设计
                     基本curd编码，第一个模块最复杂，之后可以按照类比进行
      4.原型前台 -- 客户交流/指导开发 
                    前台所有操作数据均来自后台。开发：需求-前台-后台-表 cms [当遇到新需求就会更改]/ 展示：表-dao-service逻辑-前台-展示
                    把一个复杂的前端页面拆成了多个便于维护与理解的小的jsp文件
                    home.jsp
                           header.jsp
                           top.jsp
                           search.jsp
                           homePage.jsp
                                    homePageCategoryProducts.jsp
                                    categoryAndcarousel.jsp
                                                                   ....jsp
                           footer.jsp
        5.前台无须登陆
                有一些功能，无需登录也可以使用的，比如登录，注册本身，分类页面，查询，产品页面，搜索等 
          前台需要登陆
                有一些功能，需要登陆才可以使用 ，比如购买，加入购物车，查看购物车，结算页面，订单页面等等
          sso登陆
        6.过滤拦截器
                xss攻击 / 参数校验 / cookie.session人数统计 / 角色权限
        7.service层复杂后对transaction控制
        8.优化
                登陆 / 静态资源 / 缓存 / .......
          
          
          
          
          
             
