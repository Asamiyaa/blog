1.短小

2.只做一件事   函数只做一件事 / 函数中纬度，抽象层是一个层次（校验数据 -创建连接 - 上传数据 - 关闭流）。
                             当然不是说一个函数就是由函数函数组成的。必要的逻辑判断并不影响层次
                             每个抽象层次都是To ...
              判断方式：能否从从一个函数中抽出另一个函数。

3.switch

4.使用描述性名称   好的名称思考往往会帮助理清模块，引发函数的重构

5.参数      
           1.避免四个以上参数
           2.一元参数的场景：转换 、 event(通过参数修改系统状态 无返回值)
           3.标识参数 枚举包装true/false?

6.无副作用           函数只承诺完成一件事，但是还会做隐藏起来的事。比如对变量的操作，会导致奇怪的顺序耦合和顺序依赖 

7.分割指令与询问     函数要么做什么事，要么回答什么事，但不可兼具。修改对象状态 vs 返回对象信息 

8.使用异常返回错误吗
               1.if(deletePage() == E_OK){
                    if(registy.deleteReference = E_OK){
                           if(config.deleteKey == E_OK){
                            logger.log
                           }logger.log(...);
                    }logger.log(....);
               }....
               
               优化：使用错误处理代码将程序从主路径分离出来
               
                try(
                  deletePage();
                  registry.deleteReference();
                  configKey.deleteKey;
                )catch(){
                  logger.log(e.getMessage());
                }
                
                2.使用异常代替错误码
9.别重复自己
10.如何做到程序一个入口一个出口? 一个return?
11.return break continue 

每个人不是一开始就可以设计出完美的函数或者类，都是从实现功能基础上逐渐打磨，分解函数，修改名称，消除重复.....
大师级程序员把系统当做故事来讲，而不是当做程序来写。他们使用选定的编程语言提供的工具构建一种更为丰富且具有表达力的语言，用来讲那个故事。
            
            
            
            
            
            
            
            
            
            
            
            
