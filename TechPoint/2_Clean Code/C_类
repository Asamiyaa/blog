
****
   从前面的章节中主要从method,filed,注释，格式，以及一些常用的整洁技巧梳理，系统和迭代则是更高级抽象的章节。这些章节是建立在业务基础和模块熟练
   之上，其实对于java中基本单位-“ 类 ” 是重要的。这是一个中间层，也是重要的一层。类的相关知识将在本章和effective java中类的部分进行配合学习。
   类设计熟练后，配合设计模式将企业级中常用的设计模式进行整理和加深。
****
   类的结构
        1.公共静态常量
        2.私有静态常量
        3.私有实体变量
        ..
        4.公共函数调用
        5.上面函数调用的私有工具函数
        
       自顶向下，让程序读起来就像一篇报纸文章
   
   1.类应该短小
       对于函数，我们通过“ 计算代码行数 ”衡量大小，也可以说抽象的层次。对于类，采用“ 权责 ”来衡量大小。
       类的名字应当描述其权责。实际上，命名正是帮助判断类的长度的第一手段。如果无法为某个类命名以精确的名称，这个类大概就太长了。
       类名越含混，该类越有可能拥有过多权责。例如，如果类名中包括含义模糊的词，如processor manager super if and or but 这种情况往往说明有
       不恰当的权责聚集情况存在。
       当你写完时，回过头来看该类名是否可以准确的将类的实现表述清楚。

***以下是重构中函数拆分，和类拆分关联关系***
       内聚：类应该只有少量实体变量，类中的每个方法都应该操作一个或多个这种变量。方法操作的变量越多，就越粘聚到类上。
            一般来说，创建这种极大化内聚类是及不可取也不可能的  -- 查看stack类
           
            保持函数和参数列表短小的策略，有时会导致为一组自己方法所用的实体变量数量增加，出现这种情况时，往往意味着至少有一个类要从
            大类中挣扎出来，你应当将这些变量和方法分拆到两个或者多个类中，让新的类更为内聚。
        
        保持内聚就会得到许多短小的类
            仅仅是将较大的函数切割为小函数，就将导致更多类的出现。想想看一个有许多变量的大函数，你想把该函数中某个部分拆分成单独函数。
            不过，你想要拆出来的代码使用了该函数中声明的4个变量。是否必须将4个变量都作为参数传递到新函数中去呢？
            完全没必要。----之哟啊将4个变量提升为类的实体变量，完全无需传递任何变量就嗯呢该拆解代码了。
            可是也意味着丧失了内聚性，因为堆积了越来越多只为允许少量函数共享而存在的实体变量。如果某些函数想要共享某些变量，为什么不拥有
            自己的类呢？当类丧失了内聚性，就拆分它。
            
         so:将大函数拆为许多小函数，往往也是将类拆为多个小类的时机。程序会更加有组织，也会拥有更为透明的结构
         查看代码整洁之道提供的举例：
  /**
     类设计的六大原则
        1.单一权责 SRP 类或模块应有且只有一条修改的理由  分而治之其在编程行为中的重要程度等同于在程序中的重要程度。
          许多开发者害怕数量巨大的短小的单一目的类会导致难以一目了然的抓住全局，他们认为，要搞清楚一件较大工作如何完成，就得在类之间找来找去。
          然而，有大量短小类系统并不比少量庞大类的系统拥有更多移动部件，其数量大致相等。
          问题是：你是想把工具规置到许多抽屉，每个抽屉中装有定义和标记良好的组件的工具箱中..
        2.
  
  
    当然这些原则是在你可以解决该问题的前提下，不要将编写整洁代码和解决问题混淆。你应该先找解决方案，再去整洁和优化，当然这一步是不可少的。
  */
      
