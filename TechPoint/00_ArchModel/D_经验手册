-- 新老司机---   

有一种说法是，开发经验与代码量遵循抛物线模型。从写少量代码开始，并以此结束。
新手： 以简单的代码逻辑开始，因为没有太多选择，先做出来再说。他们跟着教程和示例代码来完成程序，花的时间也是少量的。
中级： 代码量通常是最多的。因为要实现他们脑海里的“完美”设计，因为需要创建并管理更多的抽象。因为他们在项目的投入时间也是最多的。
高级：在设计时期，已经考虑到了项目上线后代码维护的工作量，完美设计有多少次得到了赞赏，并开始计算“完美”的艺术作品被抛弃的频率和没能按期交付的次数，他们的目标是在快速变化的语言和框架中选择最适合当前项目的技术栈来写最少的代码达到最少的维护成本与最短的交付时间。

新手：代码格式严重不一致。虽然这不影响功能，但代码除了给机器来运行，也是给人读的。有些新手非常热衷于新技术的学习，可惜没有意识到代码格式的重要性。代码重复，因为没有完全掌握组建化的思想。有些会把所有逻辑放在一个类里面，因为还没有掌握抽象。尽管用了比较新的框架，有时候你会发现controller里面会有几个方法柔和着不同抽象层次的逻辑。往往写出来的程序会因输入的变化而抛错。接手代码的人往往因很难维护不得不重写一些模块。有时会发现hardcode了一些配置。

中级：代码过于抽象。他们希望每个小逻辑都可以被重用，即使只用1-2次。有时候你会发现一个项目里访问者模式满天飞。调试他们的代码，找一个bug需要经过20-30个类。除此之外，过于抽象的代码对可读性也有有负面的影响。除此之外，导致项目开发周期过长。在团队里，他们完成任何任务都在追求“完美”。代码约束，抽象，最新的框架等等。开发进度缓慢。

老司机： 代码一致，代码是自注释的。逻辑简单。创建容易维护的抽象，因为过多的复杂度是没必要的。会写好每个类和接口的注释，并维护这些注释，只在必要时，对一些方法和代码行进行注释说明。不重复造轮子，不写没必要的代码。因为写了意味着测试，维护，改bug，重构，重写。

-- 拿到需求写代码前，要思考的问题有哪些---  
1.在开始写每行代码之前，先把问题彻底理解并理清所有的逻辑判断。写出伪代码。
2.对需求进行分析，想清楚最终运行的目标结果是什么，输入输出，以及最终要运行的环境。
3.我开始用文字写出过程的样子。例如，我从如何存储所有输入开始，我将如何生成输出，我将存储它以及如果需要显示我将如何显示。
4.画出数据流程图，理清展示逻辑。数据经过哪些逻辑节点，最终进入哪个存储，以及如何展示。
5.列出测试用例。想好如何测试这个程序，写出关键的test case。
6.在程序会用到的开源库有哪些，选出最适合当前程序的那个。
7.考虑多线程的运行环境，程序能否正常运行（考虑资源竞争，锁，线程同步等问题）。
8.异常捕获和日志。在哪个层面捕捉异常，如何记录日志达到快速诊断的目的。
9.写代码。

-- 抽象层次 ---
把系统中复杂和经常变化的模块单独封装。

 
抽象的好处在于 你设计的时候 能忽略无关的细节。
 
封装帮助你管理 系统的复杂度的方法在于不让你看到那些复杂度。
 
 
在设计类的时候，要养成一个习惯。 问自己 “我该隐藏些什么字段和函数”
你会惊奇的发现，有很多棘手的设计难题都会在你面前化解。
 
 
好的程序设计所面临的最重要挑战之一就是适应变化。目标应该是把不稳定的区域隔离出来。从而把所带来的影响限制在一个子程序、类或者包的内部。
方法是：
1、找出看起来容易变化的模块。
2、把容易变化的模块分离出来。把容易变化的组件单独划分成类。
设计好类的接口，把变化限制在类的内部，且不会影响类的外部。任何使用了这个将会发生变化的类的其他类都不会察觉到变化的存在。
 
下面列举出容易发生变化的区域：
1、业务规则  比如说业务逻辑处理，这样 即使更换了 界面框架，业务逻辑就不用动。
2、对硬件的依赖性  这种隔离会非常有利于你把程序移植到新的硬件环境。同样，也方便你对系统模块进行测试。比如说 当硬件功能模块尚不稳定的时候，你可以 用软件作为模拟器 模拟硬件的输入输出 来替代硬件，继续开发。等硬件可用的时候再与软件连接。
3、输入输出 如数据的存储方式 之前用文本存储后来改为数据存储。
4、非标准的语言特性 比如你系统中使用了第三方框架 那么，以后可能会舍弃使用这套框架，那么 你应该用一个单独的类 或子模块 封装对 这些第三方框架的调用。
5、困难的设计  把觉得设计的很差而需要重新做的模块 隔离出来 以减少它对系统其余部分的可能影响降至最低。
6、复杂的设计  把复杂的算法 封装，因为 复杂的模块 出错的概率 比较大 需要优化的概率很高 这跟第五条类似
7、状态变量   把状态描述的变量 尽量用枚举而非 布尔变量。 一开始用布尔变量来定义后，往往到后期会发现 除了 true 和 false 以外还需要别的状态，就改用枚举。
且使用访问器子程序 访问状态的值  而不是 对状态变量的直接检查。
8、数据量的限制  如定义一个具有100个元素的数组的时候，实质上向外部透露一些它们并不需要的知道的信息，这样会增加理解系统的复杂度。应该用 常量 MAX_LENGTH 来隐藏。
 
