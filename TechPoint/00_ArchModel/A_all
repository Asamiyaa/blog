-----------------------------------
0.编程经历阶段
   1.技术：不知道如何实现 --> 实现但不周全优雅(工具类，异常，事务 ,日志 --满足了业务要求) --> 高级技术(设计模式，反射，注解...)
   2.业务: 不同模块间不能串起来 --> 模块间可以灵活调用并“ 准确 ”划分模块
   3.架构：模块间设计，组织，调用
   
  总结：
     场景：考虑大到业务，小到if判断，提高健壮性
          有问题没事，添加码值，“ 内部逻辑控制保证满足业务需求即可 ” --没有解决不了的问题。


业务到表设计到代码设计

--------------------------------------
1.如何站在“ 上帝视角 ”看待系统？（每一个点“ 深入 ”都是庞大的。）
   
系统(硬+软)    软件系统    -> 子系统   表设计    -> 子系统分层                                              -> 代码实现                     -> if/for流程块
 服务器        bbsp  业务vs非业务               三层                                                      设计模式                        注意：任何的流程都是一个“ 域 ”    
 数据库               承兑   会员              代理层(报文发送和解析 mule...)                             合适的类型                       不可以简单的认为是行。应该站在上面写代码
 shell               质押   登录              额度系统调用中xxservice                                    业务驱动下的collection及组合    --------------|
 ...                 贴现   日志                (参数、是否需要占用、占用还是释放 、返回信息组装翻译)      工具类 effictjava              |   b ..       |  | 
                     ....                                                                             cleancode                     | a c  ..     
              aip           安全                                                                      ...                                  d..e.. |
                            监控                                                                                                      为了统一的入参出参即使“return、break”都要考虑进来看是否
                     ....                                                                                                             可以定义一个变量
                                                                                                                                    if/else是否可以抽取公共逻辑到外面。
 总结：
        优秀的系统一定: 合理的需求驱动 ，全面的场景分析 ，代码的健壮性 ，扩展及设计模式                    

 未完成：
        1.查看优秀的架构设计 完善自己的理念
        2.挑选“ 有价值 ”的模块“ 代码实现 ” *********
        

--------------------------------------
2.如何 “ 定位 ”  <-- 业务 设计模式       (通用转发报文解析中用到所有)
                                   单独用到
       (命名规律) reflect           abstract+子类      模板模式(定义流程 定义公共方法属性)     |        嵌套
                                                                                           |        交叉
                 map                                                                       |      
                                                                                           all     
                 对象-属性                                                                  |
                                   冗余
                 数据库             关联
                 
                 API               string / collection方法中参数中int范围
                 
  ------------------------------------
  3.如何 “ 触发 ”执行的操作
                 方法(判断)
                 
                 回调callBack(通过数据库配置关系，获得callBackBean,调用来自接口的CallBean的方法)-->解放逻辑 放到各自模块中处理 而不是引入业务模块再判断
                 
                 事件-js
                
  ------------------------------------
  4.如何从文档类“ 接口抽象设计 ”代码?
          1.票交所接口的定义设计好好理解
                1.命名定义
                2.枚举设计 内部类  
                3.报文 
                        1.场景设计 时序图
                        2.通信级        业务级
                          abstract     子类 
                 
                                   
                                   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
