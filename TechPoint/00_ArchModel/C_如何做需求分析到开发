----架构----
   
   背景
   业务架构(多个维度  入口-流转 | 生命周期 | 两条腿走路情况) - 
   总体架构(
            多个维度 以本系统为核心和其他系统交互-传递出入信息 | 
            分层 分模块 公共服务module(搜索引擎/配置引擎-参数|产品|规则|节假日|利息计算/流程引擎/分析引擎) 核心服务module 风险管理module(利率 |                         额度|背调|规模|黑白名单|分险票..)) 报表
            技术架构   注册中心 服务治理  报文转换  服务监控  通用日志  缓存管理  交易一致性
            （当整体庞大时，分成了不同系统，这些同样可以           在一个系统中，但是对于复杂性，复用性都是不利的）
  
   内部模块设计(
             上面分层分模块设计 整体 - 每个模块主要点) (核心交易模块 其他模块 - 子系统
              ----模块---- 主要业务流程交互
             )
   非功能性设计(性能 ：批量接口 / sql批量 / 缓存 / 日终 / 业务规则优化
               扩展 ：plugin in                
               数据迁移: 核对 验证  - 在途业务
               UI)
           
   服务接口设计 (前后台 restful / 模块间 / 
                对外发布，外围发步(总线 - 代理 - 监控)
                                 开关 
                                 统一异常包装
                                 按照渠道发布，调整互不影响
                mq
                ...
   ) 
   
   数据架构
        ER  
        历史 / 版本 / 登记中心 / param/ mapping  - 是否引入其他对象 存储过程
        dbdesign - sql (性能 - 优化)- orm
        
   部署方案
   
   关键技术设计
        记录项目搭建过程中的问题及解决方案(需求/设计/开发/生产问题 ....)
   
   运维架构
         异常处理机制
         日志管理机制
         监控机制
         
   安全架构
         1.基础设施安全
               1.服务器防火墙
               2.局域网
               3.网关
         2.应用安全
               1.SQL注入
               2.安保
         3.数据安全
               1.存储安全(定时备份)
               2.保存安全(专职人员)
               3.传输安全(加密，签名验签)
         4.代码安全
               1.防重机制
               2....编写安全代码...
         5.系统安全
               1.双机热备
               2.综合前置，应用库独立部署
         6.业务管理安全
               1.分险管控
         
      ----模块----
            里程碑/迭代  

            1.需求讨论  
            2.功能角色/用例图/场景图     --签字/说明书  
            3.泳道图 / 流程图 / 二者合体  
                    |
                    |  本地文件：复杂业务架构思考(C:\Users\73699\Desktop\复杂业务架构思考)  从上而下的结构分解和从下而上的领域模型
                    |   CQRS+DDD
                    |
            4.ER图/UML图/伪代码(--流程控制--)  --包含非功能需求(性能、安全性、可靠性 - 权限/多线程/扩展..)     
            5.开发实现(整洁/高效/高性能/扩展) - 优化   
            
            -----代码编写宗旨：	
			 实现					 - 安全 								- 简洁/高效/高性能/高可用
                       jdk/apache/spring/mybatis
           ..流程图....effective java       		         《编写安全代码》						clean code / 线程  / 数据结构算法 / 部署 
                          core java
                          设计模式
                          151个高效建议
			  

																	执行器：线程池 Excutor

																	协作和同步   
																	协作(生产消费)：condition wait notify lock.newCondition() 
																															返回一个新Condition绑定到该实例Lock实例。

																	同步:
																	1.小粒度  成员变量修饰符  AtomicInteger.. 并发容器vector -->concurrentHashamap /阻塞队列 linkedBlockQueue 协作  threadLocal  volatile  reetrentLock 读写锁  死锁  超时   
																	2.synchronized 块
																	3.方法
																	4.类

																	0.信号量 / 栅栏 / 门闩 / 队列


																	返回值
																	 Callable Future  FutureTask


																	并发中设计模式
                          
            6.单元测试 测试联调  -- 优化   
            7.送测 /bug修复 / 总结   
            8.部署     
            9.生产问题定位解决    

            详细内容：[需求分析](https://www.cnblogs.com/my-worldlet/p/10817830.html)   



