   代理模式vs 装饰者模式

但是装饰模式加的是类似的职能，比如拓展一个算法类，比如给文本框加滚动条
而代理模式加的是全新的东西，职能不在同一个方面，比如写日志，计数器，权限控制
刚学设计模式，不知道说得对不对

装饰模式目的是加功能，而代理模式目的是控制对真实对象的访问吧。

第一段说的是代理模式，侧重于不能直接访问一个对象，只能通过代理来间接访问，比如对象在另外一台机器上，或者对象被持久化了，对象是受保护的。
对象在另外一台机器上，其实就是rpc，感兴趣的可以看看dubbo的源码本地反问的其实就是远程对象的代理，只不过代理帮你做了访问这个对象之前和之后的很多事情，
但是对使用者是透明的了。对象被持久化了，比如mybatis的mapperProxy。通过mapper文件自动生成代理类。
第三种，对内核对象的访问。  第二段说的是装饰器模式是因为没法在编译器就确定一个对象的功能，需要运行时动态的给对象添加职责，
所以只能把对象的功能拆成一一个个的小部分，动态组装，感兴趣的可以看看dubbo的源码，里面的mock，cluster，failover都是通过装饰器来实现的。
因为这些功能是由使用者动态配置的。但是代理模式在编译器其实就已经确定了和代理对象的关系。    
第三段说的是，这个两个设计模式是为了解决不同的问题而抽象总结出来的。是可以混用的。可以在代理的基础上在加一个装饰，
也可以在装饰器的基础上在加一个代理。感兴趣的去看看dubbo源码，里面就是这么实现的。

为什么：新定义的类真实的引用了realObj, 并实现相同接口(保证可以调用realObj的完全可以调用新定义类)。<-- 静态代理 
       动态代理在这个基础上添加了 reflect
       
       https://www.cnblogs.com/java-my-life/archive/2012/04/23/2466712.html
