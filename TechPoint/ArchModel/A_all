1.如何站在“ 上帝视角 ”看待系统？（每一个点“ 深入 ”都是庞大的。）
   
系统(硬+软)    软件系统    -> 子系统       -> 子系统分层                                              -> 代码实现                     -> if/for流程块
 服务器        bbsp  业务vs非业务             三层                                                      设计模式                        注意：任何的流程都是一个“ 域 ”    
 数据库               承兑   会员             代理层(报文发送和解析 mule...)                             合适的类型                       不可以简单的认为是行。应该站在上面写代码
 shell               质押   登录             额度系统调用中xxservice                                    业务驱动下的collection及组合    --------------|
 ...                 贴现   日志                (参数、是否需要占用、占用还是释放 、返回信息组装翻译)      工具类 effictjava              |   b ..       |  | 
                     ....                                                                             cleancode                     | a c  ..     
              aip           安全                                                                      ...                                  d..e.. |
                            监控                                                                                                      为了统一的入参出参即使“return、break”都要考虑进来看是否
                     ....                                                                                                             可以定义一个变量
                                                                                                                                    if/else是否可以抽取公共逻辑到外面。
 总结：
        优秀的系统一定: 合理的需求驱动 ，全面的场景分析 ，代码的健壮性 ，扩展及设计模式                    

 未完成：
        1.查看优秀的架构设计 完善自己的理念
        2.挑选“ 有价值 ”的模块“ 代码实现 ” *********
        
