1.==  、 equals 、compareTo instanceof判断和equals 、 hashcode 、compareTo重写 关系和实现
    1）== 
         1.整型     i == 4 ? 
         2.null     s == null  s != null
         3.bolean   b == true 
      本质：比较两个对象的地址
    2)equals
      本质：比较两个对象的地址 但“ 这种比较逻辑是从机器角度看，通常需要重写自定义这种比较逻辑 ”
         1.Java api 中已重写  如String 
         2.自定义类中重写equals 对象比较   首先看该类是否有必要重写。比如vo ... 都是没有必要的。需要时根据逻辑重写
   
     @Override
	public boolean equals(Object obj){
          return (obj != null && obj instanceof  TestEq && (this == obj || ((TestEq)obj).getId() ==  id  ))? true :false ;
	}
	    //两种思路   1.排除所有不满足条件和return false 最后return  true  
                         if(!s.name.equals(name)) return  false ;              注意这种分支，if..else../ if() return 异性分支  / if()家条件的分支
                         ....
                         return true ;
          
                      2.排除成立的条件 return ture  最后return false  
	    //视情而定：核心做最少的判断成立条件情形少，就做成立判断； 不成立情形少，就做不成立判断。****
      3)compareTo
         本质：比较大小
	  1.Java api 中已重写  如Double等浮点型数据比较值大小 必须使用compareTo 因为考虑到小数点问题。
	  2.类实现compareTo接口/  来对对象排序 通常在集合中添加时使用到
		double d1 = 2.12d;
		float d2 = 2.12f;
		
		System.out.println(d1 ==(double) d2);  //false
		System.out.println(Double.valueOf(d1).compareTo(Double.valueOf((double)d2))); //1
		System.out.println(Double.valueOf(d1));//2.12
		System.out.println(Double.valueOf(Double.valueOf((double)d2))); //2.11999
		//化为bigDecimal
		BigDecimal bd1  = new BigDecimal(Double.valueOf(d1).toString());
		BigDecimal bd2  = new BigDecimal(Float.valueOf(d2).toString());
		System.out.println(bd1.equals(bd2));  //ture
		//使用常规会偶发性出现误差 ，浮点数运算使用bigDecimal 同类型比较使用compareTo
		
		@Override
	public int compareTo(Student o) {
		1.//排序由集合特性（set） +  对象compareTo 共同完成 默认是自然排序(字母，数值..类就不同了)
		
		2.//compareTo的重写对于排序简化了许多，屏蔽了 希尔排序，冒泡排序等细节 。留下规律：每次add新值，新值调用自己的compareTo(),通过指定排序算法（无需细节）
		// 当实现中 id - o.id > 0 则 id > o.id  则 新加对象 > 当前已存在对象       ||| -集合定的逻辑   >0 往后放   所以参数放到后面 全部比较完后   ： 依次 形成了 1 2 3  升序 
		// 当实现中 o.id - id > 0 则 id > o.id  则 当前已存在对象 > 新加对象       |||                >0 往后放   所以参数放到后面 全部比较完后   ： 依次 形成了 3 2 1  降序
		
		3.//按照重要性依次进行比较
		if( id != o.id) return id -o. id ;  //if判断之二 return ->三  增加条件  一：if /else
		if( !name.equals(o.name)) return name.compareTo(o.name); //此时即使id相同也是可以塞入的   //jvm api常用的都已重写compareTo    //return 优先级低  ！优先级低于“.”但不优于&&..
		return 0;
	

        4)hashcode
	  保持equals逻辑上的一致性，所以重写equals必须重写hashcode保持逻辑上一致性。
	  	@Override
	       public int hashCode(){
		//hashset   + hashcode 共同完成 。hashcode值一致，则不可存入
		
		//equals涉及的元素，不多不少
		int result  = id ;
		result  = 31 * result  + name.hashCode();  //Double.hashCode(money)
		result = 31* result + age ;
		return result;
	}
	
	
	1.TreeSet 是二差树实现的,Treeset中的数据是自动排好序的，不允许放入null值
        2.HashSet 是哈希表实现的,HashSet中的数据是无序的，可以放入null，但只能放入一个null，两者中的值都不能重复，就如数据库中唯一约束 
        3.HashSet要求放入的对象必须实现HashCode()方法，放入的对象，是以hashcode码作为标识的，而具有相同内容的String对象，hashcode是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例
    适用场景分析:HashSet是基于Hash算法实现的，其性能通常都优于TreeSet。我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。
	
注：详尽的解析查看3_Effictiva Java/ equal-hashcode-compare相关章节。
			 

              







