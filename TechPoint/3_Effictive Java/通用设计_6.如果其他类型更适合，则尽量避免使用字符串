 任何类型都可以使用“ 字符串  ”表示，包括基本类型，为什么还要转换对应的类型，全部使用字符串操作不是更加简单？
 
 原因分析：
      1.字符串不适合代替其他值类型
            当一段数据从文件，网络，或者键盘设备进入程序中之后，他通常以字符串的形式存在。有一种自然的倾向是让它继续保留这种形式，
            但是，只有当这段数据本质上确实是“ 文本信息 ”时，这种想法才是合理的。
             1.如果他是数值，就应该被转换为适当的数值类型。int float BigInteger
             2.如果是是、否 ，就应该转换为boolean
             ....
             如果不存在对应类型，请编写这种类型。
     
     2.字符穿不适合代替枚举类型   
            枚举类型比字符串更加适合用来表示枚举类型的常量
     
     3.字符串不适合代替聚集类型
            如果这个实体有多个组件，用一个字符串来表示是不恰当的。
            String compundKey  className+“#”+i.next();
            缺点
              1.如果分隔符域出现在某个域中，结果就会出现混乱。
              2.为了访问单独的域，必须解析字符串。你无法使用equals，toString 或者compareTo方法，“ 而被迫使用String提供的行为 ”
            ==>
              简单编写一个类来描述这两个数据集，通常使用一个* *  私有的静态成员变量 * * 。拼接的两部分就是两个属性。
              
      4.字符串也适合代替能力表
      
      总结：使用合适的数据类型而不是String。这对于“ 面向对象，复杂编程逻辑映射到现实抽象是有意义的。特别是大型复杂的项目 ”
           字符串使用不当，会笨拙，速度慢等
           但是，字符串仍然是Java中的重要数据类型，熟练String的API是必要得。
