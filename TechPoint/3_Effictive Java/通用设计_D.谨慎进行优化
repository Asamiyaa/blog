
1.谨慎使用优化，不成熟的优化可能既不快速，也不正确，而且不容易修正

2.不要因为性能牺牲合理的结构。要努力编写“ 好的程序而不是快的程序 ”。好的程序结构可以方便优化，比如信息的隐藏对其他子模块的影响。

3.问题是可以通过后期优化弥补的，但影响全局的结构是不可能改正的，因此说：设计之初对性能，架构，层次的考虑是重要的。特别在那些指定了模块间交互关系
  以及模块与外界关系的组件。比如API ,线路层协议以及永久数据格式
      API设计：使用接口而不是类   使用复合而不是继承  使用私有而不是公开 ....
      
 设计清晰，简明，结构良好的实现
 优化角度：
      1.通过性能jdk自带工具确定“ 耗时 ” 点
      2.算法
      
      详尽的优化：《Refactoring》 《PerformanceAndOptimization》
