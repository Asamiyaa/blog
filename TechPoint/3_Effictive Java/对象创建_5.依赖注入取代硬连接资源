许多类依赖于" 一个或多个底层资源 "。例如，拼写检查器依赖于字典。将此类类实现为静态实用工具类并不少见(条目 4):
静态方法：
               // Inappropriate use of static utility - inflexible & untestable!
                  public class SpellChecker {
                      private static final Lexicon dictionary = ...;

                      private SpellChecker() {} // Noninstantiable

                      public static boolean isValid(String word) { ... }
                      public static List<String> suggestions(String typo) { ... }
                  }

单例：
              // Inappropriate use of singleton - inflexible & untestable!
              public class SpellChecker {
                  private final Lexicon dictionary = ...;

                  private SpellChecker(...) {}
                  public static INSTANCE = new SpellChecker(...);

                  public boolean isValid(String word) { ... }
                  public List<String> suggestions(String typo) { ... }
              }
1.创建一个类 从类的修饰符-类名-属性修饰符-属性名- 构造方法是否公开/构造方法需要初始化哪些 - get/set/tostring/equals/compareTo/hashcode 
  - 作为服务方法中的修饰符-返回类型-方法名-参数（个数及类型 是否泛型）方法实现 / 是否有必要将方法重构/是否有必要将方法放入到baseDao或abstractClass
 final类是不可继承的 == 构造方法私有化。而构造方法还可以用来控制外界的创建
2.静态方法 vs 单例 选择  相同点：和实例无关 
      1>在抉择使用实例化方法或静态方法时，应该根据 " 是否该方法和实例化对象具有逻辑上的相关性 "，如果是就应该使用实例化对象  反之使用静态方法
           再不关系到任何于特定对象相关的操作 比如学生的年龄就是学生的相关。 修改学生的年龄就不适合用静态方法。
          *** 一般来说，如果你的方法里没有用到this关键字， 那就适合用静态方法(instance / List .等都不算的 这里指的是成员变量)***
          ***所有的信息都有静态方法参数处理则直接使用静态方法。***
          比如数学函数，如ln，sin，tan等等，这些函数本就没必要属于任何一个对象，所以从类上调用感觉更好
        2>适当地使用static方法本身并没有什么，当一个人从来不懂使用多态、接口设计时，很自然地会滥用static方法。滥用静态会导致面向对象失去优势
        
3.这两种方法都不令人满意，因为他们假设只有一本字典值得使用。在实际中，每种语言都有自己的字典，特殊的字典被用于特殊的词汇表。
  另外，使用专门的字典来进行测试也是可取的。“ 想当然地认为一本字典就足够了，这是一厢情愿的想法。 ”
        1>可以通过使dictionary属性设置为非final，并添加"*** 一个方法来更改现有拼写检查器中的字典，从而让拼写检查器支持多个字典，但是在并发环境中，
           这是笨拙的、容易出错的和不可行的 ***" 。静态实用类和单例对于那些行为被底层资源参数化的类来说是不合适的。
        2>所以在并发环境中，不可修改=final 注入=构造而不是方法
           所需要的是能够支持类的多个实例(在我们的示例中，即SpellChecker)，每个实例都使用客户端所期望的资源(在我们的例子中是dictionary)。
           满足这一需求的简单模式是在创建新实例时将资源传递到构造方法中。这是依赖项注入（dependency injection）的一种形式：
           字典是拼写检查器的一个依赖项，当它创建时被注入到拼写检查器中。
                // Dependency injection provides flexibility and testability
                public class SpellChecker {
                    private final Lexicon dictionary;

                    public SpellChecker(Lexicon dictionary) {
                        this.dictionary = Objects.requireNonNull(dictionary);   //判断参数是否为空*** 
                    }

                    public boolean isValid(String word) { ... }
                    public List<String> suggestions(String typo) { ... }
                }
       问题：1.final修饰成员变量默认值不是null吗？为什么可以通过构造注入？应该如何理解呢？final不是和static配合在加载时初始化吗？
            2.在不考虑并发的情况下，可以通过set或者普通方法传参 isValid(String word , Lexicon dictionary){
                 case dictionary
                 swich():
                   return  xxxx;  这里是解析逻辑
                     
                 swich():
                     xxxx;
                     ....
            
            }
            3. 它保持了不变性（条目 17），因此多个客户端可以共享依赖对象（假设客户需要相同的底层资源）。
               每次使用不应该都是new吗？为什么会共享对象呢？
    依赖注入模式非常简单，许多程序员使用它多年而不知道它有一个名字。 虽然我们的拼写检查器的例子只有一个资源（字典），但是依赖项注入可以使用任意数量的资源和任意依赖图。   
    依赖注入同样适用于构造方法，静态工厂（条目 1）和 builder模式（条目 2）。
    
    4.配合工厂
       该模式的一个有用的变体是将资源工厂传递给构造方法。 工厂是可以重复调用以创建类型实例的对象。 问题：工厂除了在单例中作用还有哪里用到？
       这种工厂体现了工厂方法模式（Factory Method pattern ）[Gamma95]。 
       Java 8中引入的Supplier <T>接口非常适合代表工厂。 在输入上采用Supplier<T>的方法通常应该使用有界的通配符类型( bounded wildcard type)
      （条目 31）约束工厂的类型参数，以允许客户端传入工厂，创建指定类型的任何子类型。 例如，下面是一个使用客户端提供的工厂生成tile的方法：
          Mosaic create(Supplier<? extends Tile> tileFactory) { ... }

       尽管依赖注入极大地提高了灵活性和可测试性，但它可能使大型项目变得混乱，这些项目通常包含数千个依赖项。
       使用依赖注入框架(如Dagger[Dagger]、Guice[Guice]或Spring[Spring])可以消除这些混乱。这些框架的使用超出了本书的范围，但是请注意，
       为手动依赖注入而设计的API非常适合这些框架的使用。
 ****      
    总之，不要使用单例或静态的实用类来实现一个类，该类依赖于一个或多个底层资源，这些资源的行为会影响类的行为，并且“ 不让类直接创建这些资源。”
    相反，将资源或工厂传递给构造方法(或静态工厂或builder模式)。这种称为依赖注入的实践将极大地增强类的灵活性、可重用性和可测试性。









       
   
