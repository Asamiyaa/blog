1.接口和抽象类是Java提供的定义允许多个实现的类型，抽象类允许包含某些方法的实现，但是接口则不允许。
    抽象类：提供了“ 默认实现 ”  ， 用于“ 定义流程 ” 如模板方法   bbsp中发送接收报文拼接 ， 加签等操作。如果说接口是完全抽象的，
            basexxx是完全将公共实现抽出，那么抽象类则是公共实现流程 + 需要自定义实现的部分组成
            
 2.对比 
        接口                                                                          抽象类
 1.现有类容易被更新，实现新的接口，扩展功能( 想要扩展什么，就去实现对应接口 )       如果希望将两个类扩展统一抽象类，就必须把抽象类放到类型层次的高处，以便公用一个祖先。破坏类类层次
 2.定义mixin(混合类型)的理想选择  表示可供选择的行为 如：compare 集成到主功能中    不可能有一个以上父类，类层次结构中也没有适当的地方来插入mixin';
 3.**允许我们构建非层次结构的类型框架**
   类型层次对于组织某些事物是非常合适的，但是其他有些事物并不能被整齐的组织成一个严格的层次结构，
   例如，singer songwriter
        public interface Singer{ AudicClip sing(Song s)}
        public interface songwriter{ Song compose(boolean hit)}
        现实生活中，有些歌唱家本身也是作曲家。
    
    1.提高灵活性 - 接口多重继承的基础上，添加新的扩展 。避免类层次上的“ 组合爆炸 ”
       public interface SingerSong extendds Singer,SongWriter{
            AudioClip strum();
            void actSensitive() ;
       }
   ******注意：不要看到生疏的单词就害怕，其实它本身就是“ 现实的抽象 ”，也就是对“ 业务越熟悉，这中抽象就越合理 ”*****
   ******      通过对你导出的每个重要接口都提供一个抽象的骨架实现类，把接口和抽象类的优点接口起来。接口定义类型，但是骨架实现接管了所有与接口实现相关的工作。
              vs   抽象类中定义的模板应该是固定化，不变的
   
           新思路：AbstractInterface 
     
     2.抽象类
