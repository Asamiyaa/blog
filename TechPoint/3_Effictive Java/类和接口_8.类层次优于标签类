有时候，可能会遇到带有两种甚至更多种风格的“ 实例的类 ”，并包含表示实例的风格的“ 标签tag域 ”如下：
   class Figure{
        enum Shcpe{RECTANGLE ,CICLE} ; //类中使用枚举如何理解？
        
        final Shcpe shcpe ;
        
        double length , width ;         // only rectangle use  
          
        double radius ;                 // only circle use
   
        Figure( double radis ){
          shcpe = shape.CIRCLE ;
        }
        
        Figure(double length , doubel width){  //构造方法初始化，不要仅仅局限于“属性”，把你想要的东西都init，根据业务场景******
            shcpe = Shape.RECTANCLE ;
            this.length = length ;
            this.width  = width ;
        }
   
         doubel area(){
         switch(shape){
            case RECTANGLE ;
               return length*width ;
            case CIRCLE ;
               return Math.PI*(radius*radius);
         }
     }
   
   }
   
   这种标签类充斥着“ 样板代码 ” ，枚举声明，标签域及条件语句。
   
   ------> Java提供了其他更好的方法来定义表示“ 多种风格对象的单个数据类型 ”：子类型化(subtyping) .标签类正是类层次的一种“ 简单的仿效 ”。
      1.将公共的域抽离 使用接口还是抽象类，这里明显不是 “ 模块扩展 ” ，所以使用抽象类和继承
          abstract class Figure{
              abstract doubel area();
          }
        如果有其他的方法其行为不依赖于标签的值，就把这样的方法放在这个类中，同样的，如果所有的方法都用到某些数据域，就应该把着它们放到这个类中。
        
      2.将标签类子类化
          class Circle extends Figure{
             final doubel radius ;
             
             Circle(double radius){this.radius = radius }
          
             double area(){return Math.PI * (radius*radius);}
          }
       .......类的单一职责 
       
       
       *****扩展：class SQUARE extends Recangle{   //这样的继承意味着：继承了父类中所有非private的域 并且可以直接调用 ，为什么还会有super,又不能调用private方法？
            SQUARE(double side){
                super(side ,side );
            }
       }
   
   
   
   
   
   
   
   
   
   
   
