
1.优先考虑 “ 已有类库 ” ，再基础上“ 定制化 ” 

2.使用类库的好处：
      1>类库代码更加高效，稳定和高质量。
      2>不必浪费时间，应该将时间花在应用程序上，而不是底层细节上。
      3>随着时间的推移，性能在版本的迭代中提升
      4>使自己的代码融入主流 ，更易读和被理解。

3.如何“ 知道有这些技术呢 ” ？
      1>jdk 类技术  -> 版本更新 新技术点
      2>apache等社区技术
      3>新框架
  
  实质：这些都基于对“ 优秀代码 ”的“ 阅读 ”  ! !  !   
  
4.例子
      1>生成0-n的随机整数
         Math.Random()能够返回带正号的double值，该值大于等于0.0且小于1.0，即取值范围是[0.0,1.0)的左闭右开区间，返回值是一个伪随机选择的数，在该范围内（近似）均匀分布
         注意：这些是不能通过*100 或者 %n取余 操作，因为这里生成的数可能是 小数 <---- 错误
         (int)(Math.random()*3)
         
         new Random(种子).nextInt(100);
         注意:可有可无 无代表当前时间 初始化时25并没有起直接作用（注意：不是没有起作用）,rand.nextInt(100);中的100是随机数的上限,产生的随机数为0-100的整数,不包括100。
             对于种子相同的Random对象，生成的随机数序列是一样的。注意以下对象的创建
         			Random r1 = new Random(19);
              for(int i = 0 ;i <10 ;i++)
              System.out.print(new Random(19).nextInt(100)+" | ");  //为什么每次执行得到的值相同 - 生成固定序列 我这里又每次去new固定随机数列，所以出现同一个值。
              for(int j= 0 ;j <10 ;j++)
                System.out.print(r1.nextInt(100)+"---");	
                
         直接使用Random无法避免生成重复的数字，如果需要生成不重复的随机数序列，需要借助数组和集合类
           /**
                 * 生成n个不同的随机数，且随机数区间为[0,10)
                 * @param n
                 * @return
                 */
                public ArrayList getDiffNO(int n){
                    // 生成 [0-n) 个不重复的随机数
                    // list 用来保存这些随机数
                    ArrayList list = new ArrayList();
                    Random rand = new Random();
                    boolean[] bool = new boolean[n];
                    int num = 0;
                    for (int i = 0; i < n; i++) {
                        do {
                            // 如果产生的数相同继续循环
                            num = rand.nextInt(n);
                        } while (bool[num]);
                        bool[num] = true;
                        list.add(num);
                    }
                    return list;
                }
