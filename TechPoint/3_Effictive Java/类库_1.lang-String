
        String str = new String("Abc@12@3  ");

        // 增 - 删 - 改 - 查  -->更高级api(例如charAt ...)   
           api中可以截取串的 ‘ 某个段 ’进行判断  int offset , int length

        System.out.println(
/** 定位 */
                str.charAt(1) +"  "+  //b

                str.indexOf(1)+"  "+  //-1     //相当于柔和了contains和return下标
                str.indexOf("1")+"  "+//4
                str.indexOf("b",3)+"###"+//-1

                str.length()+" "+

                //str.lastIndexOf      //上面为第一次索引，下面为最后一次索引

/** 比较判断 */
                
                 str.equals("a")+"  "+                  
                 str.contentEquals(new StringBuffer("A"))+ " " +
                
                str.compareTo("Z")+"  "+   //-25  String重写了该方法，从第一个位置开始比较，前者-后者 ascii码 | 注意类中equals和compareTo重写效果
                "2".compareTo("7")+"  "+      //-5  ***
                "z".compareToIgnoreCase("Z")+"  "+ //0

                 str.contains("a")+" "+    //false

                 str.startsWith("A")+" ---"+//TRUE
                 str.startsWith("A",1)+" "+ //flase
                 str.endsWith("3")+" "+    //true  判断后缀

                 str.matches("")+" "+ //正则
                 str.regionMatches(1,"abc",1,3)+" "+ //无需切分直接比较子串       
                 // regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len

                str.isEmpty()+" "+//apache StringUtils.isEmpty() 等价于前者+ !=null 注意 isBlank +不为“ ”

/** add */
                str.concat("gg")+"  "+ //使用直接拼接 或者+“”转为字符串
                        str+ "--contant"+ //Abc@12@3--contant
                new StringBuffer(str).append("gg").toString()+" "+
                
                
                1.通过 + 拼接  对于在“”中的快速拼接则是 在“”中 添加“+xxx变量+” (包括引号)  注意有的变量需要‘’这种形式 。 sql ...
                  vs concat
                2.对于长string进行换行 在“”中点enter，在编辑器中自动换行 ， 这种形式不是拼接 只是格式化
                3.使用buffer操作。所有的操作尽量不要出现魔幻数字 ，比如截取可以通过charAt进行定位 indexOf ... 

/** 改 */
                str.replace("@","")+" "+
                        //---和正则搭配的都未解决

                str.replaceFirst("$","&")+" " + //Abc@12@3&未匹配到，因为replace不会改变原来的串，只是临时替换，所以想要
                        //真正替换需要 接受返回值 ，所以下面的str还是原值
                        //1.定义接受  2.只在当前表达中用到关于replace的东西 .split存了，后面不用到。
                str.replaceFirst("@","&")+" "+
                str.replaceAll("$","&")+" "+
                
                //2
                String.format("xx,xx", str)+ ' '+//使用正则处理  simpleDateFormat / numberFormat / 金额 
                //3
                String.valueOf(1) +" "+ //任意类型(基本，数组，object都可以使用该方法转为string，特别是枚举时)
                //4
                str.toUpperCase()+" "+
                        str+""+         //Abc@12@3原值没动
                str.toUpperCase(Locale.ENGLISH)+" "+ //国际化
               //toLowerCase
               
               //5
               str.split("@")+" "+
               str.split("@",-1)+" "+ //尽可能多的匹配 ，当为n>0，则最多进行n-1次匹配，注意匹配过程中，拆出来的值不包含分隔符
                
                //6
               str.toCharArray()[1]+" "+ //b
               str.toCharArray().toString()+" "+  //[C@5caf905d --循环获取
               
               str.getBytes()+""+  //编码，解码时重要   和流结合使用
               
               
/** delete */
                str.trim()+" "+        //临时替换，不改变原值  2.只去除前后空白，对中间不起作用
                        str +" "+           //带有空格
                /**
                 * 切勿:str.trim()
                 *      str.xxxx进行按照已经处理的来做
                 */

                str.substring(2)+" "+   //c@12@3
                str.substring(2,4)+" "+ //c@
                str          //Abc@12@3
                注：subString不要引入硬编码数字 应该结合已有的api进行定位处理。
                       str.subString(str.indexOf("_") , str.lastIndex("!"));
                       前闭后开
                       str.length
                       
                 replace('s','a')  //结合charAt indexOf 等api获取
                 replaceAll / first ..
                        搭配正则


/**
 * @// TODO: 2019/2/21
 *    1.regex和String结合
 *    2.getbyte()和stream结合
               1.byte相当于String一样，是对象和其他形式转换的中间态
               
               
 *    3.stringBuffer中insert  delete操作 。。
               1.append(str / int ...)
                 insert(0,"c" / int ....) 其他类型也可以 
                 
               2.delete(2,4)
                 deleteCharAt(4) 删除指定位置字符
                 
               3.replace(int start, int end, String str)   
                 reverse()  反序
                 
               4.void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)   复制 
              
 */




