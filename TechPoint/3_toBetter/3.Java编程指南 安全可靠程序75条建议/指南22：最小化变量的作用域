  最小化变量的作用域可以：
      帮助开发者避免一些常见的编程错误；
      提高代码的可读性（通过让变量的声明和使用离得更近）；
      提升代码的可维护性（因为未被使用的变量更容易被检测和移除）；
      让不再被使用的对象更快地被垃圾收集机制回收，从而防止违反指南37。

违规代码示例
  在下面的违规代码示例中，变量i被声明在了for循环外。
public class Scope {
public static void main(String[] args) {
  int i = 0;
  for (i = 0; i < 10; i++) {
// Do operations
  }
 }
}

上面的代码违规的原因是：尽管变量 i 在for循环外根本没有被使用，但是它还是被声明在了方法作用域中。
只有很少的场景需要把变量i声明在方法作用域中，其中之一是，在循环中有break语句，当循环结束后，方法体中还需要使用变量i来判定循环的执行进程。

合规解决方案:
   尽可能最小化变量的作用域。例如，应该把变量i声明在循环定义的for语句中。

public class Scope {
  public static void main(String[] args) {
   for (int i = 0; i < 10; i++) { // Contains declaration
    // Do operations
  }
 }
}

违规代码示例
在下面的违规代码示例中，变量count被声明在了counter()方法之外，但是除了counter()方法，没有任何其他方法使用到它。

public class Foo {
  private int count;
  private static final int MAX_COUNT = 10;
  public void counter() {
    count = 0;
    while (condition()) {
     /* ... */
    if (count++ > MAX_COUNT) {
  return;
  }
 }
}

private boolean condition() {/* ... */}

// No other method references count

// but several other methods reference MAX_COUNT

}

上面代码中counter()方法的可重用性下降了，因为如果该方法被复制到其他类中，count变量也需要在新类中重新定义。
更重要的是，counter()方法的可分析性也下降了，因为我们需要分析整个程序的数据流，才能确定调用 counter()方法时变量count的值。

合规解决方案

在下面的合规解决方案中，变量count被声明在了counter()方法中。

public class Foo {

private static final int MAX_COUNT = 10;

  public void counter() {

  int count = 0;

  while (condition()) {

  /* ... */

  if (count++ > MAX_COUNT) {

  return;

  }

 }

}

private boolean condition() {/* ... */}

// No other method references count

// but several other methods reference MAX_COUNT

}

适用性

可以很简单地检测出所写代码中本地变量的作用域是否比其实际运用范围大，并且不存在误报的可能性。

检测多个for语句是否使用了同样的下标变量也非常简单；只有在程序员的确想要在多个循环之间共享下标变量的情况下，才会误报。

参考文献

[Bloch 2001]　　 Item 29, “Minimize the Scope of Local Variables”

[JLS 2013]　　　§14.4, “Local Variable Declaration Statements”
