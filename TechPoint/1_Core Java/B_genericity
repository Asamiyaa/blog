
---20190709 seconed-----
		泛型（T E K/V）
		 0.为了编写的代码可以被不同类型的对象所重用(提高代码重用性|创建容器类)，使用Object地方 入参/出参 ，引入泛型。类型检查/避免强制类型转换
		 
             1.当返回类型为具体类型而不是Object(由前台再去判断)时，引入  
		     public <T> T getInfo(String n ,T t){ ... return (T)xx ;}
		   泛型单独 - 当使用反射单独Class<?> = ?.class
		 
		 2.如果完成反射基础上，需要指定返回类型 那么泛型可以代替class 则 T t 传入t后，t.class 来连接 查看hook unMarshallDom()
		 
		 3.不能new  调用者必须在使用时，继承时就指定具体类型
		 
             4.擦除 及反射时不能调用t 而是Object..
		 
             5.一次使用? 无需声明<T> 
		   private <E> void swap(List<E> list, int i, int j) {
                      //...
                  }
                  private void swap(List<?> list, int i, int j){
                      //...
                  }
		   <? extends String>  参数化的类型可能是所指定的类型，或者是此类型的子类  vs super  边界
		  
              6.数组中没有泛型  - 使用list  并不是 没有 T[] T[]是正确的
		  
              
              泛型 只使用T / T t  , 泛型类定义(属性 方法都用到T (方法无需单独声明))  / 泛型方法定义 / 泛型接口定义
		   		public class GenericClass<F> {     *******--> 容器类 <--- *****
				    private F mContent;
				
				    public GenericClass(F content){
				        mContent = content;
				    }
				
				    /**
				     * 泛型方法
				     * @return
				     */
				    public F getContent() {
				        return mContent;
				    }
				
				    public void setContent(F content) {
				        mContent = content;
				    }
				
				    /**
				     * 泛型接口    
				     * @param <T>
				     */
				    public interface GenericInterface<T>{
				        void doSomething(T t);
				    }
				}
                  泛型接口比较实用的使用场景就是用作策略模式的公共策略	
                  public interface Comparator<T> {

                      public int compare(T lhs, T rhs);

                      public boolean equals(Object object);
                  }

		通配符的选择和使用
		private <E> void add(List<? super E> dst, List<E> src){
    for (E e : src) {
        dst.add(e);
    }
}
		7.擦除导致泛型的不可变性***？？？
		 你可以把任何带参数的类型传递给原始类型 List，但却不能把 List< String> 传递给接受 List< Object> 的方法，因为泛型的不可变性，会产生编译错误。 
            泛型中没有逻辑上的父子关系，如 List 并不是 List 的父类。两者擦除之后都是List，所以形如下面的代码，编译器会报错：

            /**
             * 两者并不是方法的重载。擦除之后都是同一方法，所以编译不会通过。
             * 擦除之后：
             * 
             * void m(List numbers){}
             * void m(List strings){} //编译不通过，已经存在相同方法签名
             */
            void method(List<Object> numbers) {

            }

            void method(List<String> strings) {

            }
            泛型的这种情况称为 不可变性，与之对应的概念是 协变、逆变：

            协变：如果 A 是 B 的父类，并且 A 的容器（比如 List< A>） 也是 B 的容器（List< B>）的父类，则称之为协变的（父子关系保持一致）
            逆变：如果 A 是 B 的父类，但是 A 的容器 是 B 的容器的子类，则称之为逆变（放入容器就篡位了）
            不可变：不论 A B 有什么关系，A 的容器和 B 的容器都没有父子关系，称之为不可变
            Java 中数组是协变的，泛型是不可变的。

------------------



1.为什么使用泛型
      1.可读性 编写的代码可以被“ 不同类型的对象 ’重用  --> 像反射一样从普通class向上提升 
              对具有公共逻辑的类或方法提供更高抽象，这种类型参数在入参，局部变量，成员变量及方法调用间固定了逻辑，避免了单个类单个类创建，而这些类
              或方法的处理逻辑是“ 近似的 ”，同样也避免了使用Object，模糊了内在的联系，并且需要在获取时进行强制类型转换。但这并不意味着抛弃instanceof
              在“ 无法抽离完全相同的逻辑情况下 ”，分if..else if还是必要的
      2.安全性   数据塞入时进行类型检查，方便了后面get

2.泛型的三个阶段
      1.ArrayList<String>
     
      2.创建泛型类 ，泛型方法
                   1.定义和调用
                   2.类型擦除原理
                   3.约束和局限性 ***重点和难点
               
      3.泛型数组  泛型与反射  泛型与继承
      
3.如何编写泛型
      1.对于类型参数，使用这段代码的程序员可能“ 想要内置plug in所有的类 ”，他们“ 希望在没有过多的限制以及混乱的错误消息的状态下，做所有的事情 ”
        因此说，一个泛型程序员的任务就是“ 预测出所用类的未来可能的所有用途 ”。 --反射：预测-抽出逻辑-实现-等待调用
        难度体现：ArrayList类有一个方法addAll用来添加另一个集合的全部元素，可以将ArrayList<Manager>中的所有元素添加到ArrayLst<Employee>,
                 然而反过来就不行 --> ArrayList<T> 底层是Object[] add判断类型是否一致或者继承关系*** ? extends xxx
        
      2.泛型类
                  public class Pair<T>{
                     private T first ;
                     private T second ;
                     ...
                  }
                  
                  new Pair<String> 
                
                1>可以将泛型类的参数看做是任意 ，写泛型类时逆向修改，保证这种内在关系不变
                2>反省类可看做是普通类的工厂
                
        泛型方法
               public <T> T getM(T... a){
                 return a[a.length / 2];
               }
        
      3.类型变量的限定和通配符类型           
               public static <T> T min(T[] a)
               {
                  if(a == null || a.length ==0 ) return null ;
                  T smallest = a[0];
                  for(int i = 1; i < a.length ; i++)
                      if(smallest.compareTo(a[i]) > 0 ) smallest = a[i];
                      return smallest ;
               }
            1.使用了静态方法， 返回类型为泛型，参数为泛型数组  ， 泛型类型变量声明和赋值 T smallest = a[0]
            2.使用了泛型对象的compareTo方法
            
            讲解：1.要想使用compareTo方法就必须要求对象事项compareable接口  -->T在" 声明 " 时  <T extends CompareTo>
                        1.注意这里的extends不是继承，而是表示“ 子类 ” compareTo是绑定类型 webservie中sub
                        2.T extends CompareTo & Serializable 可以根据需要拥有多个接口超类型，但限定中“ 至多 ”有一个类，如果
                           一个类作为限定，他必须是限定列表中的第一个
                 2.获得最小值，最大值思路 -> 算法排序实现   先将a[0]值赋值给变量，再循环比较赋值
                        1.T min = a[0] , T max = a[0] ;
                          for(int i = 1 ; i<a.length ; i++){
                              if(min.compareTo(a[i]) > 0 ) min = a[i];
                              if(max.compareTo(a[i] < 0))  max = a[i];
                          }
                          return new Pair<>(min,max);

                 3.泛型代码和虚拟机(泛型原理)
                        1.类型擦除 
                          无论何时定义一个泛型类型，都自动提供了一个相应的原始类型（raw type）.原始类型的名字就是" 删去类型参数后的‘第一个’泛型类型名 "。
                           擦除类型变量，并替换限定类型（无限定的变量用object）
                          Pair<T>  -> privat Object first , .....
                          
                          c++注释：就这点而言，java泛型和c++模板有很大的区别，c++中的每个模板的实例化“ 产生不同类型 ”，称为模板代码膨胀
                          
                          问题：这种擦除导致T extends Compareable & Serializable中的T替换为Compareable那么需要serialiale接口性质时
                               “ 编译器在必要时向compareable插入强制类型转换 ”，为了提高效率，应该将标签（tagging）接口（即没有方法的
                               接口）放在边界列表的末尾。
                          
                        2.翻译泛型表达式
                               Pair<Employee> bud = ....; 
                               Employee bu = bud.getFirst();
           ********** 泛型的容器概念和集合容器概念区别：前者需要将泛型类型对象作为当前类的“ 组合部分 ” ，而容器则侧重于“ 每个部分的独立只是类型相同 ”
                                擦除的返回时Object,编译器自动“ 强制类型转换 ”
                                
                          翻译泛型方法
                               泛型 vs 多态
                               桥方法 和 协变
                               https://github.com/SmileHi/blog/blob/master/TechPoint/respository/%E6%B3%9B%E5%9E%8B%E4%B8%AD%E6%A1%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%8D%8F%E5%8F%98.png
                          
                          调用遗留代码     
                               泛型引起的warning
                               https://github.com/SmileHi/blog/blob/master/TechPoint/respository/%E6%B3%9B%E5%9E%8B%E5%BC%95%E8%B5%B7%E4%BB%A3%E7%A0%81warning.png
                  4.泛型对象的声明 创建 
                  
                  5.约束和局限性 ***** 这是重点****区分普通类创建及调用逻辑*****
                     大多限制是由类型擦除引起的。
                         1.不能使用基本类型 实例化 类型参数（T...）
                               没有Pair<doubel> --> Pair<Double>  类型擦除后Object不能存储double值  ****
                        
                         2.运行时类型查询只适用于原始类型
                              虚拟机中对象总有一个“ 特定的非泛型类型 ”。
                              a instanceof Pair<String> = a instanceof pair<T> 是错误的
                              Pair<String> p = Pair<String>a ;                 是警告的
                              StringPair.getClass()== employeePair.getClass()  是正确的  返回都是Pair.class
                         
                         3.不能创建参数化泛型数组
                              Pair<String>[] a = new  Pair<String>[10]         是错误的
                              如果需要手机“ 参数化类型对象 ”，只有一种安全而有效的方法：使用ArrayList:ArrayList<Pair<String>> 
                              List<String> list = new ArrayList<>();
                              List<Object> listObj = (List<Object>)list;是不允许的
                              
                              String[] s = new String[1];
                              Object[] o = s ;              //数组可以将其中元素转为父类 是允许
                             
                              因为擦除 创建的对象是Pari<Object>,因为泛型只在“ 编译器进行控制，并在最终获取时由编译器强转来保证看起来是真泛型 ”
                             
                              因为这样做会破坏类型安全。
                              核心的问题在于Java范型和C#范型存在根本区别：Java的范型停留在编译这一层，到了运行时，这些范型的信息其实是被抹掉的；
                              而C#的范型做到了MSIL这一层。Java的做法不必修改JVM，减少了潜在的大幅改动和随之而来的风险，也许同时也反映出
                              Java Bytecode规范在设计之初的先天不足；C#则大刀阔斧，连CLR一起改以支持更彻底的范型，换句话说，在范型这一点上，
                              感觉C#更C++一点。
                              
                              在Java中，Object[]数组可以是任何数组的父类，或者说，
                              ******“ 任何一个“ 数组 ” 都可以向上转型成它在定义时指定元素类型的父类的数组“
                              这个时候如果我们往里面放不同于原始数据类型 但是满足后来使用的父类类型的话，编译不会有问题，但是在运行时会检查加
                              入数组的对象的类型，于是会抛ArrayStoreException：String[] strArray = new String[20];
                              Object[] objArray = strArray;
                              objArray[0] = new Integer(1); // throws ArrayStoreException at runtime
                              因为Java的范型会在编译后将类型信息抹掉，这样如果Java允许我们使用类似
                              Map<Integer, String>[] mapArray = new Map<Integer, String>[20];（）
                              这样的语句的话，我们在随后的代码中可以把它转型为Object[]然后往里面放Map<Double, String>实例。
                              这样做不但编译器不能发现类型错误，就连运行时的数组存储检查对它也无能为力，它能看到的是我们往里面放Map的对象，
                              我们定义的<Integer, String>在这个时候已经被抹掉了，于是而对它而言，只要是Map，都是合法的。
                              想想看，我们本来定义的是装Map<Integer, String>的数组，结果我们却可以往里面放任何Map，接下来如果有代码试图按原有
                              的定义去取值，后果是什么不言自明。
                              
                              扩展：父类 子类和泛型 https://blog.csdn.net/doudou_demo/article/details/80621182
                              
                           4.varvargs警告
                              向参数个数可变的方法传递一个泛型类型的实例  - 可变参数就是一个数组 - 当不可以和泛型结合时，所以不可以时T[] 
                              而是T ... ts 
                              @SafeVarargs 
                              
                              扩展：可以声明泛型数组吗？泛型类如何创建T t = new T() ? 如何赋值？
                           
                           5.不能实例化类型变量
                              因为如果你使用new T() ,实质你的本意并不是创建一个Object对象，但是擦除导致，所以这种迷惑性代码直接禁止。
                              解决方案：通过反射调用Class.newInstacne构造泛型对象
                                       问题：你不能通过“ 其他部分传递的参数 T类型来简化反射 ” 即：T.class.newInstance() 因为擦除就是Object.class
                                    所以你只能：public static <T> Pair<T> makePair(Class<T> cl){
                                           return new Pair<>(cl.newInstance , cl.newInstacne())
                                    }
                           6.不能构造泛型数组
                               就像不能实例化一个泛型实例一样，也不能实例化数组
                                  T[] t = new T[]      是错误的
                               解决方案：public static <T extends Compareble> T[] minmax(T... a){   *****
                                  T[] mm = Array.newInstatnce(a.getClass.getComponnetType(),2)
                               
                               }  
                            7.泛型类的静态上下文中类型变量无效
                               public class Singleton<T>{
                                   private static T singleInstatnce ;  错误
                                   
                                   private static T getSingleInstance(){...}  错误
                               }
                              ?没看懂
                             
                             8.不能抛出或捕获泛型类的实例
                               并且泛型类扩展Throwable是不合法的。
                               但是，在异常规范中使用类型变量是允许的，以下是合法的：
                               public static <T extends Throwable> void doWork(T t) throws T{
                                  try{
                                   doWork
                                  }
                                  catch(Throwable realCause){
                                   t.initCause(realCause);            ----> 自定义异常
                                   throw t ;
                                  }
                               }
                             
                              
                             9.可以消除对受查异常的检查
                               https://github.com/SmileHi/blog/blob/master/TechPoint/respository/%E6%B3%9B%E5%9E%8B%E6%B6%88%E9%99%A4%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8%E6%A3%80%E6%9F%A5.png
                             10.注意擦除后的冲突 
                               https://github.com/SmileHi/blog/blob/master/TechPoint/respository/%E6%B3%A8%E6%84%8F%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4%E5%90%8E%E7%9A%84%E5%86%B2%E7%AA%81.png
        
                   6.通配符       
                            ? extends xxx
                            ? super xxx
                            可以为方法提供参数，但不能使用返回值
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
