
1.注解(JDK5.0)  
     是什么
         类似于定义“ 工具类 ” 等一样，注解可以帮助我们做
             自动的监控赋值
             校验
             创建文档
             跟踪代码中的依赖性
             执行基本编译时检查
     使用场景：
           从某些方面看，annotation就像修饰符一样被使用， 包、类 型、构造方法、方法、成员变量、参数、本地变量的声明中。
           这些信息被存储在Annotation的“name=value”结构对中。

2.使用方式
     1.以无参数的方法的形式被声明。其方法名和返回值定义了该成员的名字和类型
     2.有一个特定的默认语法：允许声明任何Annotation成员的默认值：一个Annotation可以将name=value对作为没有定义默认值的Annotation成员的值，
       当然也可以使用name=value对来覆盖其它成员默认值。这一点有些近似类的继承特性，父类的构造函数可以作为子类的默认构造函数，但是也可以被子类覆盖。
     3.Annotation不能影响程序代码的执行，无论增加、删除 Annotation，代码都始终如一的执行。
     4.以标签的形式存在于java代码中 @javaDoc 配合对应的工具起作用 -不同的场景

3.分类
      根据注解参数的个数，我们可以将注解分为三类：
        1.标记注解:一个没有成员定义的Annotation类型被称为标记注解。这种Annotation类型仅使用自身的存在与否来为我们提供信息。
              @Override：用于修饰此方法覆盖了父类的方法;
              @Deprecated：用于修饰已经过时的方法;
              @SuppressWarnnings:用于通知java编译器禁止特定的编译警告。***** 警告从某种程度上代表了程序错误，有时也会提示代码风险 ******
                 @SuppressWarnings({ "rawtypes", "unchecked" })  @SuppressWarnings("unused")
        2.单值注解
        3.完整注解　　

      根据注解使用方法和用途，我们可以将Annotation分为三类：
        1.JDK内置系统注解
        2.元注解
        3.自定义注解
 
 4.自定义注解
       1.@Target,
            　@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、
                                                                        类型成员（方法、构造方法、成员变量、枚举值）、
                                                                        方法参数和本地变量（如循环变量、catch参数）。
                作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）
                取值(ElementType)有：
                                1.CONSTRUCTOR:用于描述构造器
                                2.FIELD:用于描述域
                                3.LOCAL_VARIABLE:用于描述局部变量
                                4.METHOD:用于描述方法
                                5.PACKAGE:用于描述包
                                6.PARAMETER:用于描述参数
                                7.TYPE:用于描述类、接口(包括注解类型) 或enum声明  *****不同的关键字****
                @Target(ElementType.FIELD)
                public @interface  StrMaxLength {
                                
        2.@Retention,
              某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；
                            编译在class文件中的Annotation可能会被虚拟机忽略，
                            而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。
                            使用这个meta-Annotation可以对 Annotation的“生命周期”限制。
              取值有：
                              　1.SOURCE:在源文件中有效（即源文件保留）
                                2.CLASS:在class文件中有效（即class保留）
                                3.RUNTIME:在运行时有效（即运行时保留）
                @Target(ElementType.FIELD)
                @Retention(RetentionPolicy.RUNTIME)
                public @interface  StrMaxLength {
                
        3.@Documented,
                @Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。
                Documented是一个标记注解，没有成员。
                
                @Target(ElementType.FIELD)
                @Retention(RetentionPolicy.RUNTIME)
                @Documented
                public @interface  StrMaxLength {
        
        4.@Inherited
　　            @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于
              一个class，则这个annotation将被用于该class的子类。
　　            注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，
                                                                            方法并不从它所重载的方法继承annotation。
　            　**** 当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。
                如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，
                直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。
                
                @Inherited                                  //枚举和注解结合
                    public @interface Greeting {
                        public enum FontColor{ BULE,RED,GREEN};
                        String name();
                        FontColor fontColor() default FontColor.GREEN;
                    }
                   可以在给属性做注解时：
                          @FruitColor(fruitColor=Color.RED)
                          private String appleColor;
            
--->自定义这注解实现：
          1.定义注解格式：
                    public @interface 注解名 {定义体}
          2.注解参数的可支持数据类型：
                    1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)
                    2.String类型
                    3.Class类型
                    4.enum类型
                    5.Annotation类型
                    6.以上所有类型的数组
           3.参数设定
                    1.只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；　 　
　　                2.参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations
                     等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;　　
　　                3.如果只有一个参数成员,最好把参数名称设为"value",后加小括号.例:下面的例子FruitName注解就只有一个参数成员。

                 @Target(ElementType.FIELD)
                    @Retention(RetentionPolicy.RUNTIME)
                    @Documented
                    public @interface  StrMaxLength {
                        String value() default  "ywjTestAnnotation" ;
                    }
            4.默认值
                　注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。
                  因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，
                  所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，
                  在定义注解时，这已经成为一个习惯用法。例如：
                   public int id() default -1;
           

----->注解信息的获取和处理  ----  发射加强了注解本有的“ 赋值功能 ”，到校验级别








