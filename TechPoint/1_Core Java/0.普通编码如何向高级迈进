                          
  如何在合适的场景需求下想到使用该技术？
            
            当你不确定使用哪个对对象时，但无论是哪个对象都需要执行“ 相同操作 ”，那么就考虑反射。在运行时确定，再去通过“ 定义好的操作执行 ”
            当你不确定使用哪个类时，但无论哪个类都需要执行“ 相同操作 ” ，那么久考虑泛型 
            
            class类就像collection这些一样是“ 容器 ”类。所以会Class<T> 表示某个类的Class形式 如果Class那么就像List一样没有约束具体
  
  
 
 普通编码和高级技术之间的关联关系及扩展了哪些？
                          
                                      反射(站在类加载信息的层面查看类信息[类加载器，任意属性方法，创建对象等])
                           
      enum(类似集合，其中包含“ 对象 ”，index,desc...)
                                                                                泛型(为程序实现“ 更高的统一抽象-灵活 ”，约束了“ 内在联系
                                                                                ” ，避免了“ instanceOf ” )
                分布式 序列化                                        
                                                        类-对象                  Array-Arrays / Collection-Collections/ ..工具
                                                                                Calendar / ApacheCommon ...
                                                                                
            annotation(自定义规则，并且“ 自动扫描 ”，实现增强和控制)      innerClass(类中使用了“ 同级别的抽象层次 ”，但这种“ 组件 ”只在当前类中用到)
                                                                              
