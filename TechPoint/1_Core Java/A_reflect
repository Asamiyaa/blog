------------API------------
package util.reflect;

import jdk.management.resource.internal.inst.UnixAsynchronousServerSocketChannelImplRMHooks;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

public class ReflectTest {
    /**
     * 0.对类级别，加载的抽象
     * 1.API中 ‘ 此 ’表示该调到用对象 。
     * 2.Class操作不只是class 包括对 数组 ，注解 ，枚举 ... 操作
     * 3.作为工具类的基础，类级别抽象基础，那么对‘ 类组件 ’的各种都需要有操作api  全面(类-方法-属性组成)+域使用
     */
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {

        /***---------------Class------------**/
        //创建
        Class<?> aClass = Class.forName("util.reflect.UserSon");//完全限定名：从sourceRoot开始  表示编译路径  vs 资源文件从项目根开始
        Class<?> aClassStr = Class.forName("java.lang.String");

        new User().getClass();

        //User.class;

        Object o = aClass.newInstance();

        //查
        Annotation[] annotations = Class.forName("util.reflect.UserSon").getAnnotations();                  //vs 属性 方法注解获取
        Annotation annotations1 = Class.forName("util.reflect.UserSon").getAnnotation(Deprecated.class);
        System.out.println(annotations1);

        System.out.println(aClass.getCanonicalName());
        //getName()返回的是虚拟机里面的class的表 getCanonicalName()返回的是更容易理解的表示 gerSimpleName()
        //比如byte[]类型,前者就是[B,后者就是byte[]
        //比如byte[][]类型,前者就是[[B,后者就是byte[][]

        System.out.println(aClass.getClasses()[0]);
        //getClasses得到该类及其父类所有的public的内部类。
        //getDeclaredClasses得到该类所有的内部类，除去父类的。

        System.out.println(aClass.getClassLoader());

        System.out.println(new String[1].getClass().getComponentType());
        //返回类的组件类型的数组。如果这个类并不代表一个数组类，此方法返回null。

        //*****
        //getConstructor(Class<?>... parameterTypes)
        //getConstructors()  返回数组
        //getDeclaredConstructor(Class<?>... parameterTypes)
        //类似的：getDeclaredField(String name)  ...  Method getDeclaredMethod(String name, Class<?>... parameterTypes)
        //getPackage
        //getModifier
        //getSuperClass

        System.out.println(aClass.getSigners()+"===");
        System.out.println(aClass.getDeclaredClasses() + "---");
        //
        System.out.println(aClass.getResourceAsStream(""));

        //判断
        System.out.println(aClass.isPrimitive());//是否基本类型 - 包装类  / 转换
        System.out.println(aClass.isInterface());//是否接口
        System.out.println(aClass.isEnum());
        System.out.println(aClass.isArray());
        //是否是注解..

        System.out.println(aClass.isLocalClass());
        //内部类相关  当底层类是成员类 ...


        //强转
        if(User.class.isAssignableFrom(aClassStr)) {                             //是否可转换从...
            Class<? extends User> aClassStr1 = aClassStr.asSubclass(User.class); //参照instance of 对象是否类型  类型窄化(子类)
            System.out.println(aClassStr1);                                      //窄话失败会报错 -添加判断
        }

        if(User.class.isInstance(new User())) {   //判定指定的 Object 是否与此 Class 所表示的对象赋值兼容。源码中有判断，不符合会抛异常|obj 和Class关系
            System.out.println(User.class.cast(new UserSon()));     //等价与(T)obj 源码/ Tree.class = Class<Tree>
        }

        /***---------------Class------------**/

        /***-------------- Method------------**/
        Method mm = UserSon.class.getDeclaredMethod("setHeight", String.class);
        Deprecated setHeight = mm.getAnnotation(Deprecated.class);
        System.out.println(setHeight);

        System.out.println(mm.getDeclaringClass());

        System.out.println(mm.getDefaultValue());

        System.out.println(Arrays.toString(mm.getExceptionTypes()));
        System.out.println(mm.getGenericExceptionTypes()[0]);
        //class java.lang.Exception  vs [Ljava.lang.Class;@6b884d57 其中[L
        //Element Type        Encoding
        //boolean             Z
        //byte                B
        //char                C
        //double              D
        //float               F
        //int                 I
        //long                J
        //short               S
        //class or interface  Lclassname;
        //详见:https://stackoverflow.com/questions/3442090/what-is-this-ljava-lang-object
        System.out.println(mm.getGenericReturnType());                     //获取返回值进行封装 处理
        System.out.println(mm.getReturnType());                            //返回Class<?>
        System.out.println(Arrays.toString(mm.getGenericParameterTypes()));//获取参数 进行invoke
        System.out.println(mm.getParameterTypes());
        System.out.println(mm.getModifiers());                             //通过Modify获取对应值
        System.out.println(mm.getName());                                  //获取名称 invoke
        System.out.println(mm.getParameterAnnotations());                  //[[Ljava.lang.annotation.Annotation;@38af3868 一个参数多个注解，多个参数 所以是二维

        mm.invoke(new UserSon() , "111");                           //调用：注意参数

        System.out.println(mm.toString());
        System.out.println(mm.toGenericString());                           //public void util.reflect.UserSon.setHeight(java.lang.String) throws java.lang.Exception

        /***-------------- Method------------**/

        /***-------------- Filed------------**/
       // Field height = UserSon.class.getField("height");                   //获取不到
        Field height = UserSon.class.getDeclaredField("height");
        System.out.println(height);
        UserSon userSon = new UserSon("1213");
        height.setAccessible(true);                                           //开放权限
        System.out.println(height.get(userSon));

        height.set(userSon,"77888");
        System.out.println(height.get(userSon));
        /***-------------- Filed------------**/

        /***-------------- Constructor------------**/

        //获取不同参数构造方法，进行对象创建

--------------API----------------------------

反射常见的坑:https://blog.csdn.net/briblue/article/details/76223206#%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8-methodinvoke-%E6%96%B9%E6%B3%95
            https://cloud.tencent.com/developer/article/1015080



**********  当你不确定使用哪个对对象时，但无论是哪个对象都需要执行“ 相同操作 ”，那么就考虑反射。在运行时确定，再去通过“ 定义好的操作执行 ”
            当你不确定使用哪个类时，但无论哪个类都需要执行“ 相同操作 ” ，那么久考虑泛型 

********** 
            1.Class<?> - xxx.class(Class对象) - .instance就像普通对象调用其中方法一样，获取其中部分，该部分就是“ 我们平时关注的xxx类的实例 ”，
              因为该对象包含的内容远大于xxx.class，这也说明我们获取其他属性，方法还是需要从“ cls实例 ”出发
              
            2.class类就像collection这些一样是“ 容器 ”类。所以会Class<T> 表示某个类的Class形式 如果Class那么就像List一样没有约束具体           
                 
            3.Class<T>:T - 由此 Class 对象建模的类的类型。例如， String.class 的类型是 Class<String>。如果将被建模的类未知，则使用 Class<?>。
            
            4.Class 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注释是一种接口。每个数组属于被映射为 Class 对象的一个类，
                所有具有相同元素类型和维数的数组都共享该 Class 对象。基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）
                和关键字 void 也表示为 Class 对象。

            5. Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。

***********
            反射 (Reflection) 是 Java 的特征之一，它允许运行中的 Java 程序“ 在运行时 ”获取 “ 自身的信息 ”，并且可以“ 操作类或对象的内部属性 ”。
                             程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。
                             (这就需要“ 我们在编写反射性代码时，抽象出公共的部分
                                                               1.对象实例化时该如何构造 newInstance 还是Constructor ”
                                                          --是否需要遍历还是直接获取属性和方法-指定
                                                               2.属性 方法获取 并判断是否和field某种get..有关，给属性塞值
                                                               3.需要invoke哪个方法 这个方法和属性是否有关，name上有啥特征比如getXxx /....
                                                               4.在运行时判断任意一个对象所属的类；
                               
            使用场景：
               1.使用 IDE(如 Eclipse，IDEA)时，当我们输入一个对象或类并想调用它的属性或方法时，一按点号，编译器就会自动列出它的属性或方法
               2.开发各种util,框架，插件，组件 等公共服务
               
               
            API:
               1.实例创建
                        Class<?> cls = Class.forName("全类名") / 类名.class / 实例.getClass(实例都有还要Class,因为只有从Class入手才得到属性和方法..)
                                                                             对象在实际的开发中这种形式是常用的，代码用来源可能来自某个传递的对象
                                                                             (而我们工具从这里开始入手处理)
                                                               Class<?> classInt = Integer.TYPE;/int.class  下面这两种用于顶层API，客户端传入
                                                   Class<?> cls =  Class.forName("util.reflect.ABC");
                        
                        newInstance 无参构造器  但是有的是没有的比如Integert Long 数组需要指定大小..... --只是创建了凡人的object子类，圣人还是cls
                        Construstor 有参构造器   Object obj = cls.getConstructor(String.class ,int.class).newInstance("gouzaoqi ",2);
                                    (api不是重点)
               2.属性 方法
                 属性更多的是遍历，方法则更多是直接获取“ 某个有特征的方法 ”
                        Filed: Field name = cls.getDeclaredField("name"); cls对象的所有方法包括private getFiled指的是所有public包括继承的
                      
                                      @xxx
                        获得结果是：   private String name = "xxx" ;  ---> 对象 任何一个比如注解，类型，修饰符也都是一个类型可单独获取
                       
                       API:	getAnnotation(Class<T> annotationClass) 
                                    getModifiers() 
                                    String  getName() 
                                    getType() 
                                    ...以上都是可以获取的，当你想要获取具体值“xxx” 或者set时 需要name.setAccessible(true);解除访问限制
                                    
                                               for (int i = 0; i < cls.getDeclaredFields().length; i++) {
                                                    System.out.print("1----"+cls.getDeclaredFields()[i]);
                                                    System.out.println("2-----"+cls.getDeclaredFields()[i].getName());
                                                }

                 方法：获取指定方法
                                      Method method1 = cls.getMethod("method1", String.class, int.class);
                                      
                         获得结果是：  @xxx
                                      public String method1(String str , int i ) throws Exception{..
                         
                         API :       Type[]	getGenericParameterTypes() 
                                     Type	getGenericReturnType() 
                                     Annotation[][]	getParameterAnnotations() 
                                     .... 以上都是可以获取的，当你想要获取具体值“xxx” 或者set时 需要name.setAccessible(true);解除访问限制
                             ******方法的获取经常用到“ 字符串的处理拼接" 比如parseint 这种默认的约定的方法获取和调用*******      
                           
                3. invoke
                        Object	invoke(Object obj, Object... args)  --->bj:反射创建的对象  args:该方法的参数列表
                                    method1.invoke(obj,"yangwj",1);  
                                 
               4.一些不常用的
                       T cast(Object obj)   将一个对象强制转换成此 Class 对象所表示的类或接口。这也是在继承并且运行时一致的前提下
                       URLgetResource(String name)  查找带有给定名称的资源。
                       InputStream	getResourceAsStream(String name)  找具有给定名称的资源。
                                 
                        
                          
                          
                                                               
            
