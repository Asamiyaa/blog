--重点：sql语句 表的优化查看第三章。

1.表建立  其他对象建立：存储过程，触发器....

2.sql语句：
      
      1.索引失效
               
               1.避免对索引字段进行计算操作  where trunc(create_date)=trunc(:date1)
               2.避免在索引字段上使用not，<>，!=
               3.避免在索引列上 负向查询 使用IS NULL和IS NOT NULL 前置模糊 %xx 后置允许(修改前台程序——把查询条件的供应商名称一栏由原来的文本输入改为下拉列表)
               4.避免在索引列上出现数据类型转换
               5.避免在索引字段上使用函数    select * from order where YEAR(date) <= '2017'
               6. 避免建立索引的列中使用空值。  建表默认值
               ----展现禁止在where条件上使用函数和计算(经常作为 where 查询条件会作为索引)
               7.避免在WHERE子句中使用in，not  in，or 或者having  使用exist代替in,分成两个查询union代替or
               8.避免以字符格式声明数字，要以数字格式声明字符值。（日期同样）否则会使索引无效，产生全表扫描。不要使用：SELECT emp.ename, emp.job FROM emp WHERE emp.empno = ‘7369’

      
      2.表连接
               1.join union (union vs union all vs minus vs intersect )...
                  UNION 因为会将各查询子集的记录做比较，故比起UNION ALL ，通常速度都会慢上许多.如果使用UNION ALL能满足要求的话，务必使用UNION ALL。
               2.子查询 
       
       3.排序
               1.避免使用耗费资源的操作，带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎 执行，耗费资源的排序(SORT)功能. 
                 DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序
